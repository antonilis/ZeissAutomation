<?xml version="1.0" encoding="utf-8"?>
<Script>
  <Context>Zen26</Context>
  <Version>1.0</Version>
  <Language>Python</Language>
  <Text>

import json
import time
from execute_python import run_python_script                                  

class ZeissApiProcessor:

    def __init__(self, experiments, measuring_points_path):

        self.experiments = experiments #dictionairy with the type of the experiments and path to them
        self.measuring_points = self.read_measuring_points(measuring_points_path)
        self.stage_position = self.get_stage_focus_position()

    @staticmethod
    def read_measuring_points(path):
        with open(path, "r") as file:

            data = json.load(file)

        return data

    def get_stage_focus_position(self):
        x = Zen.Devices.Stage.ActualPositionX
        y = Zen.Devices.Stage.ActualPositionY
        z = Zen.Devices.Focus.ActualPosition

        return [x, y, z]

    @staticmethod
    def move(points_to_move):
        Zen.Devices.Stage.MoveTo(points_to_move[0], points_to_move[1])
        Zen.Devices.Focus.MoveTo(points_to_move[2])


    def load_experiment(self, chosen_experiment):

        experiment_path = self.experiments[chosen_experiment]
        exp = Zen.Acquisition.Experiments.GetByName(experiment_path)
        exp.SetActive()
	    time.sleep(10)

    def execute_current_experiment(self):
        Zen.Acquisition.Execute(Zen.Acquisition.Experiments.ActiveExperiment)


    def save_experiment_result(self, path):
        Zen.Application.Save(path)
        time.sleep(10)                    

    def save_experiment_result(self, path):
            image = Zen.Application.Documents.ActiveDocument
            image.Save(path)


def log(msg):
    path = "D:\\zeiss\\Desktop\\zen_log.txt"
    with open(path, "a") as f:
        f.write(msg + "\n")




experiments = {"FCS": "automation_FCS.czexp", "Image": "automation_imaging.czexp"}

measuring_points_path = "D:\\zeiss\\Desktop\\automation\\data_points.json"

results_path = "D:\\zeiss\\Desktop\\automation\\results"


processor = ZeissApiProcessor(experiments, measuring_points_path)

current_position = processor.get_stage_focus_position()
log(str(current_position))

measuring_points = processor.measuring_points #check at this moment if those points make any sense
log(str(measuring_points))

processor.load_experiment('Image')


#processor.save_experiment_result(results_path + "\\movement_picture.czi") 
processor.execute_current_experiment()
processor.save_experiment_result(results_path + "img.czi")
#certain_points = measuring_points['centers'] 


#for p in certain_points:
    
    #log(str(p))
    #processor.move(p) 
    #processor.execute_current_experiment()



#processor.load_experiment('FCS')
#processor.execute_current_experiment()
#processor.save_experiment_result('XXX')

# if this works, just write a loop that will go through all of the points and measure
</Text>
  <Author></Author>
  <Description></Description>
  <Keywords></Keywords>
  <Row>24</Row>
  <Column>45</Column>
</Script>