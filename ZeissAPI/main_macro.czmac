< ?xml
version = "1.0"
encoding = "utf-8"? >
< Script >
< Context > Zen26 < / Context >
< Version > 1.0 < / Version >
< Language > Python < / Language >
< Text >

import json
import time
from System.IO import Path
from execute_python import run_python_script, log
import uuid


###################### class for API calls ###########################################################
class ZeissApiProcessor:

    @staticmethod
    def read_measuring_points(path):
        with open(path, "r") as file:
            data = json.load(file)

        return data

    @staticmethod
    def get_stage_focus_position():
        x = Zen.Devices.Stage.ActualPositionX
        y = Zen.Devices.Stage.ActualPositionY
        z = Zen.Devices.Focus.ActualPosition

        return [x, y, z]

    @staticmethod
    def move(points_to_move):
        Zen.Devices.Focus.MoveTo(points_to_move[2] - 1200)

        Zen.Devices.Stage.MoveTo(points_to_move[0], points_to_move[1])
        Zen.Devices.Focus.MoveTo(points_to_move[2])

        Zen.Devices.Focus.MoveTo(points_to_move[2])

    @staticmethod
    def load_experiment(chosen_experiment):
        exp = Zen.Acquisition.Experiments.GetByName(chosen_experiment)
        exp.SetActive()
        time.sleep(10)

    @staticmethod
    def execute_current_experiment():
        Zen.Acquisition.Execute(Zen.Acquisition.Experiments.ActiveExperiment)
        time.sleep(10)

    @staticmethod
    def save_experiment_result(path, name):
        image = Zen.Application.Documents.ActiveDocument

        directory = Path.Combine(path, name)

        image.Save(directory)


######################## Configuration ##############################################
CONFIG_PATH = "D:\\zeiss\\Desktop\\automation\\config\\path_config.json"
EXPERIMENTS_PATH = "D:\\zeiss\\Desktop\\automation\\config\\experiments_list.json"

with open(EXPERIMENTS_PATH, "r") as f:
    experiments = json.load(f)

# Load paths from config
with open(CONFIG_PATH, "r") as f:
    config = json.load(f)

results_path = config["results_path"]
image_for_analysis_path = config["image_for_analysis_path"]
measuring_points_path = config["measuring_points_path"]
python_script_analysis_path = config["python_script_analysis_path"]

################################## Actual script: #######################################


# prepaire image for aquisition
ZeissApiProcessor.load_experiment(experiments["Image_overview"])
overview_id = uuid.uuid4()
name = "{}_Image_overview.czi".format(overview_id)
ZeissApiProcessor.save_experiment_result(image_for_analysis_path, name)

# run python analysis
args = [name, "TLGUV"]
run_python_script(args)

# Utilize the measurements on the objects of the image
measurement_points = ZeissApiProcessor.read_measuring_points(
    Path.Combine(measuring_points_path, "{}_measurements_points.json".format(name)))

for object_id in measurement_points.keys():
    object = measurement_points[object_id]

    ZeissApiProcessor.move(object['position'])

    ZeissApiProcessor.load_experiment(experiments["Image_20xclose-up"])
    ZeissApiProcessor.execute_current_experiment()
    ZeissApiProcessor.save_experiment_result(results_path, "{}_{}".format(object_id, "Image_20xclose-up"))

    # Zen_obj.load_experiment("RICS")
    # Zen_obj.execute_current_experiment()
    # Zen_obj.save_experiment_result(results_path, "{}_{}".format(object_id, "RICS"))
    #
    # Zen_obj.load_experiment("FCS")
    # Zen_obj.execute_current_experiment()
    # Zen_obj.save_experiment_result(results_path, "{}_{}".format(object_id, "FCS"))

< / Text >
< Author > < / Author >
< Description > < / Description >
< Keywords > < / Keywords >
< Row > 24 < / Row >
< Column > 45 < / Column >
< / Script >
