import json


class ZeissApiProcessor:

    def __init__(self, experiments, measuring_points_path):

        self.experiments = experiments #dictionairy with the type of the experiments and path to them
        self.measuring_points = self.read_measuring_points(measuring_points_path)
        self.stage_position = self.get_stage_position()

    @staticmethod
    def read_measuring_points(path):
        with open(path, "r") as file:

            data = json.load(file)

        return data

    def get_stage_focus_position(self):
        x = Zen.Devices.Stage.ActualPositionX
        y = Zen.Devices.Stage.ActualPositionY
        z = Zen.Devices.Focus.ActualPosition

        return [x, y, z]

    @staticmethod
    def move(points_to_move):
        Zen.Devices.Stage.MoveTo(points_to_move[0], points_to_move[1])
        Zen.Devices.Focus.MoveTo(points_to_move[2])


    def load_experiment(self, chosen_experiment):

        experiment_path = self.experiments[chosen_experiment]
        exp = Zen.Acquisition.Experiments.GetByName(experiment_path)
        exp.SetActive()

    def execute_current_experiment(self):
        Zen.Acquisition.Execute(Zen.Acquisition.Experiments.ActiveExperiment)


    def save_experiment_result(self, path):
        Zen.Application.Save(path)


